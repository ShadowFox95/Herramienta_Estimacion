package com.becarios.proyecto_definitivo.service.criterios;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.becarios.proyecto_definitivo.dao.criterios.ModuleDao;
import com.becarios.proyecto_definitivo.dto.criterios.TablasEditDto;
import com.becarios.proyecto_definitivo.model.criterios.CasosDeUso;
import com.becarios.proyecto_definitivo.model.criterios.Cuoriginal;
import com.becarios.proyecto_definitivo.model.criterios.Integracion;
import com.becarios.proyecto_definitivo.model.criterios.Negocio;
import com.becarios.proyecto_definitivo.model.criterios.Perfiles;
import com.becarios.proyecto_definitivo.model.criterios.Persistencia;
import com.becarios.proyecto_definitivo.model.criterios.Vista;

@Service("ModuleService")
@Transactional
public class ModuleServiceImpl implements ModuleService {

    @Autowired
    private ModuleDao dao;

    @Override
    public CasosDeUso findByCode(int id) {
        return dao.findByCode(id);
    }

    @Override
    public void saveModulo(CasosDeUso modulo) {
        dao.saveModule(modulo);

    }

    @Override
    public void updateModulo(CasosDeUso modulo) {
        CasosDeUso entity = dao.findByCode(modulo.getId());
        if (entity != null) {
            entity.setNombre(modulo.getNombre());
            entity.setModulo(modulo.getModulo());
            entity.setCodigo(modulo.getCodigo());
            entity.setId(modulo.getId());
            entity.setIdProyecto(modulo.getIdProyecto());
            entity.setTotalFila(modulo.getTotalFila());
        }

    }

    @Override
    public void deleteModuloByCode(int id, int idProyecto) {
        dao.deleteModuleByCode(id, idProyecto);

    }

    @Override
    public List<CasosDeUso> findAllModulo(int id) {
        return dao.findAllModules(id);
    }

    @Override
    public void createModulo(int idProyecto) {
        CasosDeUso m = new CasosDeUso();
        m.setNombre("Nombre por defecto");
        m.setCodigo("Codigo"); // Autogenerated Value
        m.setModulo("Caso de uso" + " por defecto");
        m.setTotalFila(5);
        m.setIdProyecto(idProyecto);

        int idRow = dao.saveModule(m);

        Perfiles perfiles = new Perfiles(idRow, 1, 5, 5);
        Vista vista = new Vista(idRow, 1, 5, 5, 5, 5, 20);
        Negocio negocio = new Negocio(idRow, 1, 5, 5);
        Persistencia persistencia = new Persistencia(idRow, 1, 5, 5);
        Cuoriginal cuoriginal = new Cuoriginal(idRow, 5, 5);
        Integracion integracion = new Integracion(idRow, 1, 2, 2);

        dao.saveAllTablas(perfiles, vista, negocio, persistencia, cuoriginal, integracion);
    }

    @Override
    public void editTable(int idProyecto, int id, TablasEditDto tablas) {
        CasosDeUso c = tablas.getCasosUso();
        c.setIdProyecto(idProyecto);
        dao.saveModule(c);
        dao.saveAllTablas(tablas.getPerfiles(), tablas.getVista(), tablas.getNegocio(), tablas.getPersistencia(),
                tablas.getCuoriginal(), tablas.getIntegracion());
    }

    @Override
    public boolean AddModulo(int idProyecto, String code, String caseOfUse, String name, int perfilesTotal,
            int perfilesNro, int perfilesComplejidad, int vistaTotal, int vistaNro, int vistaCampos,
            int vistaComplejidad, int vistaListados, int vistaBotones, int negocioTotal, int negocioNro,
            int negocioLogica, int persistenciaTotal, int persistenciaNro, int persistenciaAccesos, int cuTotal,
            int cuDificultad, int integracionTotal, int integracionNro, int integracionComplejidad) {
        try {
            // Crear el Objeto a Guardar
            CasosDeUso modulo = new CasosDeUso();
            modulo.setIdProyecto(idProyecto);
            modulo.setCodigo(code);
            modulo.setModulo(caseOfUse);
            modulo.setNombre(name);
            modulo.setTotalFila(0);

            int idRow = dao.saveModule(modulo);

            // Llamar al service para que lo guarde

            // Crea objeto Perfiles
            Perfiles perfiles = new Perfiles();
            perfiles.setCasosdeUsosCodigo(modulo.getId());
            perfiles.setNro(perfilesNro);
            perfiles.setComplejidad(perfilesComplejidad);
            perfiles.setTotal(perfilesTotal);

            // Crea objeto Vista
            Vista vista = new Vista();
            vista.setCasosdeUsosCodigo(modulo.getId());
            vista.setNro(vistaNro);
            vista.setBotones(vistaBotones);
            vista.setCampos(vistaCampos);
            vista.setComplejidad(vistaComplejidad);
            vista.setListados(vistaListados);
            vista.setTotal(vistaTotal);

            // Crea objeto Negocio
            Negocio negocio = new Negocio();
            negocio.setCasosdeUsosCodigo(modulo.getId());
            negocio.setNro(negocioNro);
            negocio.setLogica(negocioLogica);
            negocio.setTotal(negocioTotal);

            // Crea objeto Persistencia
            Persistencia persistencia = new Persistencia();
            persistencia.setCasosdeUsosCodigo(modulo.getId());
            persistencia.setNro(persistenciaNro);
            persistencia.setAccesos(persistenciaAccesos);
            persistencia.setTotal(persistenciaTotal);

            // Crea objeto CUOriginal
            Cuoriginal cu = new Cuoriginal();
            cu.setCasosdeUsosCodigo(modulo.getId());
            cu.setComplejidad(cuDificultad);
            cu.setTotal(cuTotal);

            // Crea objeto Integracion
            Integracion integracion = new Integracion();
            integracion.setCasosdeUsosCodigo(modulo.getId());
            integracion.setNro(integracionNro);
            integracion.setComplejidad(integracionComplejidad);
            integracion.setTotal(integracionTotal);

            float total;

            // lo calcula el procedure de la base de datos.
            // if (editado){
            if (!true) {
                total = (float) ((perfilesTotal + vistaTotal + negocioTotal + persistenciaTotal) / 7);
            } else {
                total = (float) ((perfilesTotal + vistaTotal + negocioTotal + persistenciaTotal) * 0.8 / 7
                        + integracionTotal * 0.2);
            }

            modulo.setTotalFila(total);

            this.saveModulo(modulo);
            // Not implemented yet
            dao.saveModule(modulo);
            dao.saveAllTablas(perfiles, vista, negocio, persistencia, cu, integracion);

        } catch (Exception e) {
            return false;
        }
        return true;
    }

    @Override
    public List<Object> findAllTablas(int idModulo) {
        return dao.findAllTablas(idModulo);
    }

}
